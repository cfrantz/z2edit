import z2edit
from z2edit import Address
from z2edit.util import ObjectDict, Config, Tile, chr_clear, chr_copy

EMPTY = []

WEST_CAVE_BACKGROUND = [
    # Note: 2E,2F are the medicine in west hyrule, but the lava backdrop
    # in east hyrule.
    0x28,0x29,0x2a,0x2b,0x2c,0x2d,
    0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
    0x7c,0x7d,0x7e,0x7f,
    0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
    0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
    0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,
    0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
    0xc0,0xc1,0xc2,0xc3,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
    0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
    0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
    0xf0,0xf1,0xf2,0xf3,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff,
]

WEST_CAVE_SPRITES = [
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x2e,0x2f,
    0x30,0x31,
    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,
    0x80,0x81,0x82,0x83,
]

EAST_CAVE_BACKGROUND = [
    # Note: 2E,2F are the medicine in west hyrule, but the lava backdrop
    # in east hyrule.
    0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
    0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
    0x7c,0x7d,0x7e,0x7f,
    0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
    0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
    0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,
    0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
    0xc0,0xc1,0xc2,0xc3,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
    0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
    0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
    0xf0,0xf1,0xf2,0xf3,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff,
]

EAST_CAVE_SPRITES = [
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,
    0x30,0x31,
    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,
    0x80,0x81,0x82,0x83,
]

TOWN_BACKGROUND = [
    0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
    0x60,0x61,0x62,0x63,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,
    0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
    0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
    0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,
    0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
    0xc0,0xc1,0xc2,0xc3,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
    0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
    0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
    0xf0,0xf1,0xf2,0xf3,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff,
]

TOWN_SPRITES = [
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,
    0x64,0x65,0x66,0x67,
    0x80,0x81,0x82,0x83,
]

PALACE_BACKGROUND = [
    0x5c,0x5d,0x5e,0x5f,
    0x62,0x63,0x64,0x65,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,
    0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
    0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
    0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,
    0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
    0xc0,0xc1,0xc2,0xc3,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
    0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
    0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
    0xf0,0xf1,0xf2,0xf3,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff,
]

PALACE_SPRITES = [
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
    0x30,0x31,0x32,0x33,0x3c,0x3d,0x3e,0x3f,
    0x44,0x45,0x46,0x47,0x4c,0x4d,0x4e,0x4f,
    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,
    0x60,0x61,0x66,0x67,
    0x80,0x81,0x82,0x83,
    0xac,0xad,0xae,0xaf,
]

GREAT_PALACE_BACKGROUND = [
    0x5c,0x5d,0x5e,0x5f,
    0x62,0x63,0x64,0x65,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
    0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,
    0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
    0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
    0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,
    0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
    0xc0,0xc1,0xc2,0xc3,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
    0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
    0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
    0xf0,0xf1,0xf2,0xf3,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff,
]

GREAT_PALACE_SPRITES = [
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
    0x30,0x31,0x32,0x33,0x3c,0x3d,0x3e,0x3f,
    0x44,0x45,0x46,0x47,0x4c,0x4d,0x4e,0x4f,
    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,
    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,
    0x60,0x61,0x66,0x67,
    0x80,0x81,0x82,0x83,
    0xac,0xad,0xae,0xaf,
]

OVERWORLD_BACKGROUND = [
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
    0x40,0x41,0x42,0x43,
    0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
    0x70,0x71,0x72,0x73,0x7c,0x7d,0x7e,0x7f,
    0xc0,0xc1,0xc2,0xc3,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
    0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
    0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
    0xf0,0xf1,0xf2,0xf3,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,
]

OVERWORLD_SPRITES = [
    0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
    0x50,0x51,0x52,0x53,0x54,0x55,
    0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,
    0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,
]

BANKS = [
    (0x01, EMPTY, EMPTY),                               # Title screen
    (0x03, WEST_CAVE_BACKGROUND, WEST_CAVE_SPRITES),    # West Hyrule caves
    (0x05, EAST_CAVE_BACKGROUND, EAST_CAVE_SPRITES),    # East Hyrule caves
    (0x07, TOWN_BACKGROUND, TOWN_SPRITES),              # Towns
    (0x09, PALACE_BACKGROUND, PALACE_SPRITES),          # P1
    (0x0b, PALACE_BACKGROUND, PALACE_SPRITES),          # P2
    (0x0d, GREAT_PALACE_BACKGROUND, GREAT_PALACE_SPRITES), # GP
    (0x0f, EMPTY, EMPTY),                               # Victory sequence
    (0x11, OVERWORLD_BACKGROUND, OVERWORLD_SPRITES),    # Overworld
    (0x13, PALACE_BACKGROUND, PALACE_SPRITES),          # P3
    (0x15, PALACE_BACKGROUND, PALACE_SPRITES),          # P4
    (0x17, PALACE_BACKGROUND, PALACE_SPRITES),          # P5
    (0x19, PALACE_BACKGROUND, PALACE_SPRITES),          # P6
]

def Chr1k(bank, offset):
    return Address.chr(bank//4, 1024*(bank%4) + offset)

class ChrDedup(object):
    """Deduplicate CHR banks on 1KiB boundaries, thus reducing graphics
    duplication and opening up the MMC5 CHR arrangment for more graphics and
    graphical tricks.

    This class should operate on the post-expansion graphics arrangement such
    that sprites are in 4K banks $00-$1F and backgrounds in $20-$28.
    """
    def __init__(self, edit):
        self.edit = edit
        # The layout is a list of lists:
        # The inner list is 12 CHR bank numbers (1K bankd) that make up a vbank.
        # The outer list is the set of vbanks which recreate the game's
        #   original graphics set.
        self.layout = []

    def analyze(self, banks=13):
        # The vanilla game has 13 8KiB CHR banks, which we think of as 26 4KiB
        # banks.  The MMC5 chr expanision creates explicit 4KiB background banks
        # starting at bank 0x20.
        data = {}
        for bank in range(banks):
            layout = [0]*12
            sprite1 = bank * 2
            sprite2 = bank * 2 + 1
            background = 0x20 + bank
            for offset in range(4):
                # Read out 1K blocks of data and remember the 1KiB bank number
                # for the first time we encountered each 1KiB pattern.
                s1 = self.edit.read_bytes(Address.chr(sprite1, offset*1024), 1024)
                if s1 not in data:
                    data[s1] = sprite1 * 4 + offset
                s2 = self.edit.read_bytes(Address.chr(sprite2, offset*1024), 1024)
                if s2 not in data:
                    data[s2] = sprite2 * 4 + offset
                bg = self.edit.read_bytes(Address.chr(background, offset*1024), 1024)
                if bg not in data:
                    data[bg] = background * 4 + offset
                layout[0 + offset] = data[s1]
                layout[4 + offset] = data[s2]
                layout[8 + offset] = data[bg]
            self.layout.append(layout)

    def deduplicate(self):
        data = {}
        # Read in all the unique bank data
        for row in self.layout:
            for bank in row:
                if bank not in data:
                    realbank = bank // 4
                    offset = 1024 * (bank % 4)
                    data[bank] = self.edit.read_bytes(Address.chr(realbank, offset), 1024)

        # Erase all CHR (64 x 4KiB banks == 256 KiB)
        for bank in range(64):
            self.edit.write_bytes(Address.chr(bank, 0), b'\xFF' * 4096)

        # Rewrite just the unique banks back into CHR
        remap = {}
        layout = []
        for row in self.layout:
            newrow = []
            for bank in row:
                if bank not in remap:
                    remap[bank] = len(remap)
                    realbank = remap[bank] // 4
                    offset = 1024 * (remap[bank] % 4)
                    self.edit.write_bytes(Address.chr(realbank, offset), data[bank])
                newrow.append(remap[bank])
            layout.append(newrow)
        print('Remapped CHR into %d 1KiB banks' % len(remap))
        self.layout = layout

    def print(self):
        for i, row in enumerate(self.layout):
            print('vbank $%02x:' % i, end='')
            print(', '.join('$%02x' % bank for bank in row))

    def inject(self, config, asm):
        # Allocate 256 bytes for a VBank table.  This should allow for up
        # to 21 virtual banks.
        vbank_table = self.edit.alloc(Address.prg(0, 0), 256)
        # Tell config where the VBank table is located.
        config.misc.chr_bank_scheme = {
            'MMC5_12By1K': ObjectDict.from_address(vbank_table)
        }
        i = 0
        for row in self.layout:
            for bank in row:
                self.edit.write(vbank_table + i, bank)
                i += 1

        vbank_routine_len = 33
        vbank_routine = self.edit.alloc(Address.prg(0, 0), vbank_routine_len)
        vbank_routine_end = vbank_routine.addr() + vbank_routine_len

        # 26 bytes
        asm(f"""
        VBANK_TABLE = {vbank_table.addr()}
        VBANK_BG_RESTORE = $06ec
        _BG_RESTORE_OFFSET = $06e4

        .bank 0
        .org {vbank_routine.addr()}
        bank0_chr_load_A:
            sta $5205               ; vbank number into MMC5 multiplier
            lda #6                  ; Half table length (bank number pre-multiplied by 2)
            sta $5206               ; Table length into multiplier
            ldx $5205               ; Offset of vbank table
            ldy #0
        vbank_loop:
            lda VBANK_TABLE,x
            sta $5120,y
            cpy #8
            bcc vbank_incr
            sta _BG_RESTORE_OFFSET,y
        vbank_incr:
            inx
            iny
            cpy #12
            bne vbank_loop
            rts
        .assert_org {vbank_routine_end}

        ; Clean up stuff in bank 0 - make them go by our local bank0 routine.
        .org $8150
            jsr     bank0_chr_load_A
        .org $a86b
            jsr     bank0_chr_load_A

        .org $ff70
        bank7_code0 = $c000
        bank7_reset:
            sei
            cld
            ldx     #$00
            stx     $2000
            inx
            lda     #3
            sta     $5100           ; four 8k PRG banks
            sta     $5101           ; CHR mode: all 1k banks
            stx     $5103           ; Allow writing to WRAM
        wait_ppu:
            lda     $2002
            bpl     wait_ppu
            dex
            beq     wait_ppu
            txs

            stx     $5117           ; Top bank is last bank
            dex
            stx     $5116           ; Top bank is last bank
            lda     #2
            sta     $5102           ; Allow writing to WRAM

            lda     #$50            ; horizontal mirroring
            sta     $5105
            lda     #0              ; Vbank 0
            jsr     bank7_chr_bank_switch__load_A
            ;lda     #$07
            ;jsr     bank7_Load_Bank_A_0x8000
            nop ;cli                     ; FIXME: Want interrupts?
            jmp     bank7_code0

        .org $ffb1
        bank7_chr_bank_switch__load_A:
            tax
            jsr     bank7_Load_Bank_0_at_0x8000
            txa
            jsr     bank0_chr_load_A
            jmp     bank7_Load_Bank_769_at_0x8000
        bank7_chr_helper_for_bank5:
            jsr     bank7_chr_bank_switch__load_A
            lda     #5
            jmp     bank7_Load_Bank_A_0x8000
        .db $ea

        .assert_org $FFC5
        bank7_Load_Bank_0_at_0x8000:
            lda     #$00
            beq     bank7_Load_Bank_A_0x8000
        bank7_Load_Bank_769_at_0x8000:
            lda     $0769
        bank7_Load_Bank_A_0x8000:
            asl
            ora     #$80
            sta     $5114
            ora     #1
            sta     $5115
            lda     #0
            rts
        ; Fill with NOPs
        .db $ea,$ea,$ea,$ea
        .db $ea,$ea
        """)

        # A bug in the assembler - fixups don't happen properly when using
        # .bank directives to switch banks.
        bank7_chr_helper_for_bank5 = asm.symtab['BANK7_CHR_HELPER_FOR_BANK5']
        asm(f"""
        .bank 5
        .org $a728
            jsr {bank7_chr_helper_for_bank5}
        """)


def chr_bank_copy(edit, dstbank, srcbank):
    data = edit.read_bytes(Address.chr(srcbank, 0), 4096)
    edit.write_bytes(Address.chr(dstbank, 0), data)

# This version of an MMC5 conversion maintains a lot of compatability with
# the way the vanilla game used MMC1:
#
# PRG banks are mapped as four 8KiB banks, but the bank switching routines
# arrange to switch pairs of banks so the layout is still MMC1-like.
#
# CHR banks are mapped as 4KiB banks, but programmed into MMC in pairs so
#    the layout is similar to MMC1.
#
# The value-add of this conversion is that there is far more CHR address space
# available and we use MMC5's ability to trick the PPU into using 3 banks at
# a time instead of two, allowing a full 256 sprites _and_ 256 background tiles.
#
# An even more experimental conversion is to use 1KiB CHR banks and construct
# a virtual bank table which allows for up to 21 Banks and allows further
# custom hacks to do sub-bank swaps for background animation effects.
# Using `vbanks=True` enables this more experimental option.

def hack(edit, asm, vbanks=False):
    meta = edit.meta
    config = Config.get(meta['config'])

    # Update the NES header to say we're using MMC5.  Preseve the low nybble
    # containing flags and write the mapper number into the upper nybble.
    mapper = edit.read(Address.file(6))
    mapper = (mapper & 0xF) | 0x50
    edit.write(Address.file(6), mapper)

    # Obliterate the per-bank bankswitch code since bank 7 is always mapped.
    # This frees up 112 bytes in each bank.
    blank = b'\xFF' * 112
    for bank in range(0, 7):
        addr = Address.prg(bank, 0xbf70)
        edit.write_bytes(Address.prg(bank, 0xbf70), blank)
        edit.free(addr, len(blank))
        # Also obliterate the reset/interrupt vectors in the low banks
        # as they are never actually used.
        vectors = Address.prg(bank, 0xbff8)
        edit.write_bytes(vectors, b'\xFF' * 8)
        edit.free(vectors, 8)

    # Note: when vbanks == True, most of this assembly will get replaced
    # with more custom code.
    asm("""
    .bank 7
    bank7_code0 = $c000

    .org $c4d0
        lda     #$a4            ; Use vertical mirroing
        sta     $5105

    .org $ff70
    bank7_reset:
        sei
        cld
        ldx     #$00
        stx     $2000
        inx
        stx     $5101           ; CHR mode 2x4k banks
        stx     $5103           ; Allow writing to WRAM
    wait_ppu:
        lda     $2002
        bpl     wait_ppu
        dex
        beq     wait_ppu
        txs

        lda     #3
        sta     $5100           ; four 8k PRG banks
        stx     $5117           ; Top bank is last bank
        dex
        stx     $5116           ; Top bank is last bank
        lda     #2
        sta     $5102           ; Allow writing to WRAM

        lda     #$50            ; horizontal mirroring
        sta     $5105
        jsr     bank7_chr_bank_switch__load_A
        lda     #$07
        jsr     bank7_Load_Bank_A_0x8000
        nop ;cli                     ; FIXME: Want interrupts?
        jmp     bank7_code0
    .db $ea,$ea,$ea,$ea
    .db $ea,$ea,$ea,$ea

    .org $ffb1
    bank7_chr_bank_switch__load_A:
        sta     $5123
        ora     #1
        sta     $5127
        lsr
        ora     #$20
        sta     $512b
        lda     #0
        clc
        rts
    .db $ea,$ea

    bank7_Load_Bank_0_at_0x8000:
        lda     #$00
        beq     bank7_Load_Bank_A_0x8000
    bank7_Load_Bank_769_at_0x8000:
        lda     $0769
    bank7_Load_Bank_A_0x8000:
        asl
        ora     #$80
        sta     $5114
        ora     #1
        sta     $5115
        lda     #0
        rts
    ; Fill with NOPs
    .db $ea,$ea,$ea,$ea
    .db $ea,$ea


    ; Clean up stuff in bank zero - make it go via bank7's routines.
    .bank 0
    .org $8149
        lda     #$50            ; horizontal mirroring
        sta     $5105
    .org $8150
        jsr     $ffb1
    .org $a86b
        jsr     $ffb1


    ; Clean up stuff in bank 5 - make it go via bank7's routines.
    .bank 5
    .org $a712
        lda     #$50            ; horizontal mirroring
        sta     $5105
    .org $a728
        jsr     $ffb1
    """)


    ######################################################################
    # Copy the odd numbered 4k banks to the newly added banks, then clear
    # background objects from the original banks and clear sprite objects
    # from the newly copied banks.
    ######################################################################
    for (n, (bank, background, sprites)) in enumerate(BANKS):
        bgbank = 0x20 + n
        chr_bank_copy(edit, bgbank, bank)
        for t in background:
            chr_clear(edit, Tile(bank, t), True)
        for t in sprites:
            chr_clear(edit, Tile(bgbank, t), True)

    if not vbanks:
        for sideview in config.sideview.group:
            bank = sideview.chr.Chr[0]
            sideview.chr.Chr[0] = 0x20 + bank // 2

        for overworld in config.overworld.map:
            bank = overworld.chr.Chr[0]
            overworld.chr.Chr[0] = 0x20 + bank // 2
    else:
        # Monkey patch in a useful constructor method
        Address.Chr1k = staticmethod(Chr1k)
        d = ChrDedup(edit)
        d.analyze()
        d.print()
        d.deduplicate()
        d.print()
        d.inject(config, asm)

    name = meta['config'] + '-mmc5'
    Config.put(name, config)
    # Now tell the project about the new config
    meta['extra'] = {'next_config': name}
    edit.meta = meta


